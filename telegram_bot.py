import os
import asyncio
import logging
from datetime import datetime
from openai import OpenAI
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from io import BytesIO
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
from dotenv import load_dotenv

# ==============================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==============================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==============================
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
# ==============================
class TelegramBotWithAppsScript:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º env
        load_dotenv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._validate_env_variables()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.bitrix_webhook = os.getenv("BITRIX_WEBHOOK_URL")
        self.google_script_url = os.getenv("GOOGLE_SCRIPT_URL")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
        self.openai_client = OpenAI(api_key=self.openai_api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        self.app = Application.builder().token(self.telegram_token).build()
        self.setup_handlers()
    
    def _validate_env_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = ["TELEGRAM_BOT_TOKEN", "OPENAI_API_KEY"]
        missing_vars = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        
        logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    
    # ==============================
    # Handlers
    # ==============================
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        try:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–¥–µ–π.\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —á–µ—Ä–µ–∑ GPT ü§ñ"
            )
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        try:
            await update.message.reply_text(
                "üìã –Ø —É–º–µ—é:\n"
                "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT\n"
                "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª—å\n"
                "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Bitrix24\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å–∫\n"
                "‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            )
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        if not self.google_script_url:
            await update.message.reply_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Google Script)")
            return
            
        try:
            username = update.effective_user.username or "unknown"
            url = f"{self.google_script_url}?action=getStats&user={username}"
            
            response = await asyncio.to_thread(requests.get, url, timeout=10)
            
            if response.status_code == 200:
                try:
                    stats_data = response.json()
                    await update.message.reply_text(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_data}")
                    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {username}")
                except Exception as json_error:
                    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {response.text}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                
        except asyncio.TimeoutError:
            await update.message.reply_text("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ stats_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    # ==============================
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # ==============================
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        username = update.effective_user.username or "unknown"
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {username}: {text[:50]}...")
        
        processing_msg = await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ GPT...")
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ GPT
            processed_text = await self.process_with_chatgpt(text)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await self.save_to_google_sheet(username, user_id, "text", text, processed_text)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await processing_msg.edit_text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n\n{processed_text}")
            logger.info(f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è {username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ handle_text: {e}")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")

    # ==============================
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # ==============================
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        username = update.effective_user.username or "unknown"
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {username}")
        
        processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            voice_bytes = BytesIO()
            await voice_file.download_to_memory(voice_bytes)
            voice_bytes.seek(0)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è)
            text = await asyncio.to_thread(self.voice_to_text, voice_bytes)
            
            if not text:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å")
                return
            
            await processing_msg.edit_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text[:100]}...")
            logger.info(f"–ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –¥–ª—è {username}: {text[:50]}...")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ GPT
            processed_text = await self.process_with_chatgpt(text)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await self.save_to_google_sheet(username, user_id, "voice", text, processed_text)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await processing_msg.edit_text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n\n{processed_text}")
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è {username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ handle_voice: {e}")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    # ==============================
    # GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞
    # ==============================
    async def process_with_chatgpt(self, text: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT"""
        try:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...")
            
            response = await asyncio.to_thread(
                self.openai_client.chat.completions.create,
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –∏ –º—ã—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."},
                    {"role": "user", "content": text}
                ],
                max_tokens=600,
                temperature=0.7
            )
            
            result = response.choices[0].message.content.strip()
            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPT. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}"

    # ==============================
    # Speech-to-text (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    # ==============================
    def voice_to_text(self, voice_bytes):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç"""
        temp_ogg_path = None
        temp_wav_path = None
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ogg —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_ogg:
                temp_ogg.write(voice_bytes.read())
                temp_ogg_path = temp_ogg.name
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav
            audio = AudioSegment.from_ogg(temp_ogg_path)
            audio = audio.set_frame_rate(16000).set_channels(1)
            
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_wav:
                temp_wav_path = temp_wav.name
                audio.export(temp_wav_path, format="wav")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            recognizer = sr.Recognizer()
            with sr.AudioFile(temp_wav_path) as source:
                audio_data = recognizer.record(source)
                try:
                    text = recognizer.recognize_google(audio_data, language="ru-RU")
                    logger.info("‚úÖ –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                    return text
                except sr.UnknownValueError:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                    return None
                except sr.RequestError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                    return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ voice_to_text: {e}")
            return None
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if temp_ogg_path and os.path.exists(temp_ogg_path):
                os.unlink(temp_ogg_path)
            if temp_wav_path and os.path.exists(temp_wav_path):
                os.unlink(temp_wav_path)

    # ==============================
    # Google Sheets + Bitrix
    # ==============================
    async def save_to_google_sheet(self, username, user_id, message_type, original_text, processed_text):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets"""
        if not self.google_script_url:
            logger.info("Google Script URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
            return
        
        try:
            data = {
                "action": "saveMessage",
                "timestamp": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                "username": username,
                "user_id": str(user_id),
                "message_type": message_type,
                "original_text": original_text,
                "processed_text": processed_text
            }
            
            response = await asyncio.to_thread(
                requests.post, 
                self.google_script_url, 
                json=data, 
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                if self.bitrix_webhook:
                    await self.create_bitrix_task(processed_text, username)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {response.status_code} - {response.text}")
                
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ save_to_google_sheet: {e}")

    async def create_bitrix_task(self, description, username):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Bitrix24"""
        try:
            task_data = {
                "fields": {
                    "TITLE": f"–ù–æ–≤–∞—è –∏–¥–µ—è –∏–∑ Telegram –æ—Ç {username}",
                    "DESCRIPTION": description,
                    "RESPONSIBLE_ID": 1,
                    "PRIORITY": "1"
                }
            }
            
            response = await asyncio.to_thread(
                requests.post, 
                f"{self.bitrix_webhook}/tasks.task.add", 
                json=task_data, 
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Bitrix24")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Bitrix: {response.status_code} - {response.text}")
                
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Bitrix")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ create_bitrix_task: {e}")

    # ==============================
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    # ==============================
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.app.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES
            )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

# ==============================
# MAIN
# ==============================
if __name__ == "__main__":
    try:
        bot = TelegramBotWithAppsScript()
        bot.run()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏ OPENAI_API_KEY")
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
