import os
import asyncio
import logging
from datetime import datetime
from openai import OpenAI
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from io import BytesIO
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
from dotenv import load_dotenv

# ==============================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==============================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==============================
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
# ==============================
class TelegramBotWithAppsScript:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º env
        load_dotenv()

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.bitrix_webhook = os.getenv("BITRIX_WEBHOOK_URL")
        self.google_script_url = os.getenv("GOOGLE_SCRIPT_URL")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
        self.openai_client = OpenAI(api_key=self.openai_api_key)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        self.app = Application.builder().token(self.telegram_token).build()
        self.setup_handlers()

    # ==============================
    # Handlers
    # ==============================
    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–¥–µ–π.\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —á–µ—Ä–µ–∑ GPT ü§ñ"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üìã –Ø —É–º–µ—é:\n"
            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª—å\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Bitrix24\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å–∫\n"
            "‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            response = requests.get(
                f"{self.google_script_url}?action=getStats&user={update.effective_user.username}"
            )
            if response.status_code == 200:
                stats_data = response.json()
                await update.message.reply_text(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_data}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ stats: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    # ==============================
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # ==============================
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        processing_msg = await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ GPT...")
        processed_text = await self.process_with_chatgpt(text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await self.save_to_google_sheet(
            update.effective_user.username,
            update.effective_user.id,
            "text",
            text,
            processed_text
        )

        await processing_msg.edit_text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n\n{processed_text}")

    # ==============================
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # ==============================
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...")
        try:
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            voice_bytes = BytesIO()
            await voice_file.download_to_memory(voice_bytes)
            voice_bytes.seek(0)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç
            text = await self.voice_to_text(voice_bytes)
            if not text:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å.")
                return

            await processing_msg.edit_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text[:100]}...")

            processed_text = await self.process_with_chatgpt(text)

            await self.save_to_google_sheet(
                update.effective_user.username,
                update.effective_user.id,
                "voice",
                text,
                processed_text
            )

            await processing_msg.edit_text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n\n{processed_text}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ voice: {e}")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ")

    # ==============================
    # GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞
    # ==============================
    async def process_with_chatgpt(self, text: str) -> str:
        try:
            response = await asyncio.to_thread(
                self.openai_client.chat.completions.create,
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –∏–¥–µ–∏."},
                    {"role": "user", "content": text}
                ],
                max_tokens=600,
                temperature=0.7
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ GPT. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

    # ==============================
    # Speech-to-text
    # ==============================
    async def voice_to_text(self, voice_bytes):
        try:
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_ogg:
                temp_ogg.write(voice_bytes.read())
                temp_ogg_path = temp_ogg.name

            audio = AudioSegment.from_ogg(temp_ogg_path)
            audio = audio.set_frame_rate(16000).set_channels(1)

            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_wav:
                temp_wav_path = temp_wav.name
                audio.export(temp_wav_path, format="wav")

            recognizer = sr.Recognizer()
            with sr.AudioFile(temp_wav_path) as source:
                audio_data = recognizer.record(source)
                try:
                    text = recognizer.recognize_google(audio_data, language="ru-RU")
                except sr.UnknownValueError:
                    text = None

            os.unlink(temp_ogg_path)
            os.unlink(temp_wav_path)
            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ STT: {e}")
            return None

    # ==============================
    # Google Sheets + Bitrix
    # ==============================
    async def save_to_google_sheet(self, username, user_id, message_type, original_text, processed_text):
        if not self.google_script_url:
            return
        try:
            data = {
                "action": "saveMessage",
                "timestamp": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                "username": username,
                "user_id": user_id,
                "message_type": message_type,
                "original_text": original_text,
                "processed_text": processed_text
            }
            response = requests.post(self.google_script_url, json=data)
            if response.status_code == 200:
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets")
                if self.bitrix_webhook:
                    await self.create_bitrix_task(processed_text)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")

    async def create_bitrix_task(self, description):
        try:
            task_data = {
                "fields": {
                    "TITLE": "–ù–æ–≤–∞—è –∏–¥–µ—è –∏–∑ Telegram",
                    "DESCRIPTION": description,
                    "RESPONSIBLE_ID": 1,
                    "PRIORITY": "1"
                }
            }
            response = requests.post(f"{self.bitrix_webhook}/tasks.task.add", json=task_data)
            if response.status_code == 200:
                logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Bitrix24")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Bitrix: {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Bitrix: {e}")

    # ==============================
    # Run
    # ==============================
    def run(self):
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.app.run_polling(drop_pending_updates=True)

# ==============================
# MAIN
# ==============================
if __name__ == "__main__":
    bot = TelegramBotWithAppsScript()
    bot.run()
