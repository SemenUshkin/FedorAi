import os
import asyncio
import logging
from datetime import datetime
import openai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import json
from io import BytesIO
import speech_recognition as sr
from pydub import AudioSegment
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBotWithAppsScript:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.bitrix_webhook = os.getenv('BITRIX_WEBHOOK_URL')
        
        # URL –≤–∞—à–µ–≥–æ Google Apps Script –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.google_script_url = os.getenv('GOOGLE_SCRIPT_URL')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
        openai.api_key = self.openai_api_key
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        self.app = Application.builder().token(self.telegram_token).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–¥–µ–π!

–Ø –º–æ–≥—É:
‚Ä¢ üé§ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üí¨ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
‚Ä¢ üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ ChatGPT
‚Ä¢ üìä –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Google —Ç–∞–±–ª–∏—Ü—É
‚Ä¢ üìã –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Bitrix24

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
        """
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1. üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
   ‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ø–µ—à–∞
   ‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç
   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä—É—Å—Å–∫—É—é —Ä–µ—á—å

2. üí¨ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
   ‚Ä¢ –ü–∏—à–∏—Ç–µ –ª—é–±—ã–µ –∏–¥–µ–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏
   ‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   ‚Ä¢ –ë–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –≤–∞—à—É –º—ã—Å–ª—å

3. üìä **–ö–æ–º–∞–Ω–¥—ã:**
   ‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
   ‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
   ‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ —Å–≤–æ—é –∏–¥–µ—é, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
        """
        await update.message.reply_text(help_text)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ Google Apps Script
            response = await asyncio.to_thread(
                requests.get,
                f"{self.google_script_url}?action=getStats&user={update.effective_user.username or update.effective_user.first_name}"
            )
            
            if response.status_code == 200:
                stats_data = response.json()
                stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats_data.get('total', 0)}
üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {stats_data.get('voice', 0)}
üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {stats_data.get('text', 0)}
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {stats_data.get('last_date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
{stats_data.get('categories', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
                """
                await update.message.reply_text(stats_text)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            voice_file = await context.bot.get_file(update.message.voice.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            voice_bytes = BytesIO()
            await voice_file.download_to_memory(voice_bytes)
            voice_bytes.seek(0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_msg.edit_text("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            text = await self.voice_to_text(voice_bytes)
            
            if text:
                await processing_msg.edit_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text[:100]}{'...' if len(text) > 100 else ''}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ChatGPT
                await processing_msg.edit_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ ChatGPT...")
                processed_text = await self.process_with_chatgpt(text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google —Ç–∞–±–ª–∏—Ü—É
                await processing_msg.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ —Ç–∞–±–ª–∏—Ü—É...")
                await self.save_to_google_sheet(
                    username=update.effective_user.username or update.effective_user.first_name,
                    user_id=update.effective_user.id,
                    message_type='voice',
                    original_text=text,
                    processed_text=processed_text
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_text = f"""
‚úÖ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!**

üí≠ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –º—ã—Å–ª—å:**
{processed_text}

üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É
                """
                
                await processing_msg.edit_text(result_text)
            else:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            processing_msg = await update.message.reply_text("üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ChatGPT
            await processing_msg.edit_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ ChatGPT...")
            processed_text = await self.process_with_chatgpt(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google —Ç–∞–±–ª–∏—Ü—É
            await processing_msg.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ —Ç–∞–±–ª–∏—Ü—É...")
            await self.save_to_google_sheet(
                username=update.effective_user.username or update.effective_user.first_name,
                user_id=update.effective_user.id,
                message_type='text',
                original_text=text,
                processed_text=processed_text
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"""
‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!**

üí≠ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –º—ã—Å–ª—å:**
{processed_text}

üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É
            """
            
            await processing_msg.edit_text(result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def voice_to_text(self, voice_bytes):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                temp_ogg.write(voice_bytes.read())
                temp_ogg_path = temp_ogg.name
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            audio = AudioSegment.from_ogg(temp_ogg_path)
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—É–¥–∏–æ
            audio = audio.normalize()
            audio = audio.set_frame_rate(16000).set_channels(1)
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
                temp_wav_path = temp_wav.name
                audio.export(temp_wav_path, format="wav")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            r = sr.Recognizer()
            r.energy_threshold = 300
            r.pause_threshold = 0.8
            
            with sr.AudioFile(temp_wav_path) as source:
                r.adjust_for_ambient_noise(source, duration=0.5)
                audio_data = r.record(source)
                
                # –ü—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–π, –ø–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                try:
                    text = r.recognize_google(audio_data, language='ru-RU')
                except sr.UnknownValueError:
                    try:
                        text = r.recognize_google(audio_data, language='en-US')
                    except sr.UnknownValueError:
                        text = None
                
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.unlink(temp_ogg_path)
            os.unlink(temp_wav_path)
            
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None

    async def process_with_chatgpt(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT API"""
        try:
            response = await asyncio.to_thread(
                openai.ChatCompletion.create,
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–±–æ—á–∏—Ö –∏–¥–µ–π –∏ –º—ã—Å–ª–µ–π.
                        
–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å –º—ã—Å–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –°–¥–µ–ª–∞—Ç—å –µ—ë –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π
3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π)
5. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üéØ –°—É—Ç—å –∏–¥–µ–∏: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏]
‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: [–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]
üìä –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞: [–∫–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç]"""
                    },
                    {"role": "user", "content": text}
                ],
                max_tokens=600,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ChatGPT API: {e}")
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ ChatGPT. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

    async def save_to_google_sheet(self, username, user_id, message_type, original_text, processed_text):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Apps Script"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            category = self.determine_category(original_text)
            priority = self.determine_priority(original_text)
            responsible = self.get_responsible(category)
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            data = {
                'action': 'saveMessage',
                'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'username': username,
                'user_id': user_id,
                'message_type': message_type,
                'category': category,
                'priority': priority,
                'original_text': original_text,
                'processed_text': processed_text,
                'responsible': responsible
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Apps Script
            response = await asyncio.to_thread(
                requests.post,
                self.google_script_url,
                json=data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É")
                
                # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Bitrix24, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                if self.bitrix_webhook:
                    await self.create_bitrix_task(processed_text, responsible, category, priority)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google: {response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É: {e}")

    def determine_category(self, text):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text_lower = text.lower()
        
        categories = {
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': ['–∫–æ–¥', '–±–∞–≥', '—Ñ–∏—á–∞', 'api', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': ['—Ä–µ–∫–ª–∞–º–∞', '—Å–µ–æ', '–∫–æ–Ω—Ç–µ–Ω—Ç', '—Å–æ—Ü—Å–µ—Ç–∏', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥'],
            '–ø—Ä–æ–¥–∞–∂–∏': ['–∫–ª–∏–µ–Ω—Ç', '—Å–¥–µ–ª–∫–∞', '–ø—Ä–æ–¥–∞–∂–∏', '–º–µ–Ω–µ–¥–∂–µ—Ä', 'crm', '–ª–∏–¥'],
            '–ø–æ–¥–¥–µ—Ä–∂–∫–∞': ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '–ø—Ä–æ–±–ª–µ–º–∞', '–≤–æ–ø—Ä–æ—Å', '—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
        }
        
        for category, keywords in categories.items():
            if any(keyword in text_lower for keyword in keywords):
                return category
        
        return '–æ–±—â–µ–µ'

    def determine_priority(self, text):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        text_lower = text.lower()
        
        high_priority = ['—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–≥–æ—Ä–∏—Ç', 'asap', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ']
        low_priority = ['–∏–¥–µ—è', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–Ω–µ —Å—Ä–æ—á–Ω–æ']
        
        if any(word in text_lower for word in high_priority):
            return '–≤—ã—Å–æ–∫–∏–π'
        elif any(word in text_lower for word in low_priority):
            return '–Ω–∏–∑–∫–∏–π'
        
        return '—Å—Ä–µ–¥–Ω–∏–π'

    def get_responsible(self, category):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        responsible_map = {
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
            '–ø—Ä–æ–¥–∞–∂–∏': '–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤',
            '–ø–æ–¥–¥–µ—Ä–∂–∫–∞': '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
            '–æ–±—â–µ–µ': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        }
        
        return responsible_map.get(category, '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')

    async def create_bitrix_task(self, description, responsible, category, priority):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Bitrix24"""
        try:
            priority_map = {'–Ω–∏–∑–∫–∏–π': '0', '—Å—Ä–µ–¥–Ω–∏–π': '1', '–≤—ã—Å–æ–∫–∏–π': '2'}
            
            task_data = {
                "fields": {
                    "TITLE": f"[{category.upper()}] –ù–æ–≤–∞—è –∏–¥–µ—è –∏–∑ Telegram",
                    "DESCRIPTION": description,
                    "RESPONSIBLE_ID": 1,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Bitrix24
                    "PRIORITY": priority_map.get(priority, '1'),
                    "TAGS": [category, "telegram-bot", priority]
                }
            }
            
            response = await asyncio.to_thread(
                requests.post,
                f"{self.bitrix_webhook}/tasks.task.add",
                json=task_data
            )
            
            if response.status_code == 200:
                logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Bitrix24")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Bitrix24: {response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Bitrix24: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å Google Apps Script...")
        self.app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    bot = TelegramBotWithAppsScript()
    bot.run()
