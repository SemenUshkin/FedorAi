import os
import logging
import asyncio
from datetime import datetime
import openai
import requests
from flask import Flask, request, jsonify
from telegram import Bot, Update
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GOOGLE_SCRIPT_URL = os.getenv('GOOGLE_SCRIPT_URL')
WEBHOOK_URL = os.getenv('RENDER_EXTERNAL_URL', 'https://fedorai.onrender.com')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_TOKEN)

async def process_with_chatgpt(text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT"""
    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...")
        
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–¥–µ–π –∏ –º—ã—Å–ª–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏
3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
4. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –§–æ—Ä–º–∞—Ç:
üéØ –°—É—Ç—å –∏–¥–µ–∏: [–æ–ø–∏—Å–∞–Ω–∏–µ]
üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: [—à–∞–≥–∏]
‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: [–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]
üìä –ú–µ—Ç—Ä–∏–∫–∏: [–∫–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å —É—Å–ø–µ—Ö]"""
                },
                {"role": "user", "content": text}
            ],
            max_tokens=600,
            temperature=0.7
        )
        
        result = response.choices[0].message.content.strip()
        logger.info("–û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ ChatGPT: {e}\n\n–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

async def save_to_google_sheet(username, user_id, original_text, processed_text):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É"""
    try:
        if not GOOGLE_SCRIPT_URL:
            logger.info("Google Script URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
            
        data = {
            'action': 'saveMessage',
            'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
            'username': username,
            'user_id': user_id,
            'original_text': original_text,
            'processed_text': processed_text
        }
        
        response = await asyncio.to_thread(
            requests.post,
            GOOGLE_SCRIPT_URL,
            json=data,
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {response.text}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")

async def handle_message(update_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        update = Update.de_json(update_data, bot)
        
        if not update.message:
            return
            
        message = update.message
        text = message.text
        user = message.from_user
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username}: {text}")
        
        # –ö–æ–º–∞–Ω–¥—ã
        if text == '/start':
            response_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–¥–µ–π!

–Ø –º–æ–≥—É:
‚Ä¢ üí¨ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
‚Ä¢ üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ ChatGPT
‚Ä¢ üìä –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
            """
            await bot.send_message(chat_id=message.chat_id, text=response_text)
            return
            
        elif text == '/help':
            response_text = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é –∏–¥–µ—é –∏–ª–∏ –∑–∞–¥–∞—á—É
2. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—ë —á–µ—Ä–µ–∑ ChatGPT  
3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
            """
            await bot.send_message(chat_id=message.chat_id, text=response_text)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if text and not text.startswith('/'):
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await bot.send_message(
                chat_id=message.chat_id, 
                text="üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ ChatGPT..."
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ChatGPT
            processed_text = await process_with_chatgpt(text)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É
            if GOOGLE_SCRIPT_URL:
                await save_to_google_sheet(
                    username=user.username or user.first_name,
                    user_id=user.id,
                    original_text=text,
                    processed_text=processed_text
                )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_text = f"""
‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!**

üí≠ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –º—ã—Å–ª—å:**
{processed_text}
            """
            
            await bot.edit_message_text(
                chat_id=message.chat_id,
                message_id=processing_msg.message_id,
                text=result_text
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è {user.username}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.route(f'/webhook/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    """Webhook endpoint"""
    try:
        json_data = request.get_json()
        
        if json_data:
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–π
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(handle_message(json_data))
            loop.close()
            
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """Health check"""
    return jsonify({
        'status': 'healthy',
        'bot': 'running',
        'webhook': 'active'
    }), 200

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': 'Telegram Bot is running',
        'status': 'active'
    }), 200

async def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook/{TELEGRAM_TOKEN}"
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
        
        result = await bot.set_webhook(
            url=webhook_url,
            allowed_updates=["message"]
        )
        
        if result:
            logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

def run_webhook_setup():
    """–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(setup_webhook())
    loop.close()

if __name__ == '__main__':
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook –±–æ—Ç–∞...")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    run_webhook_setup()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port, debug=False)
