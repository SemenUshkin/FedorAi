import os
import logging
import asyncio
from datetime import datetime
import openai
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from flask import Flask, request
import threading
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WebhookTelegramBot:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.google_script_url = os.getenv('GOOGLE_SCRIPT_URL')
        self.bitrix_webhook = os.getenv('BITRIX_WEBHOOK_URL')
        
        # URL –≤–∞—à–µ–≥–æ Render —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
        self.webhook_url = os.getenv('RENDER_EXTERNAL_URL', 'https://your-service.onrender.com')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
        openai.api_key = self.openai_api_key
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = Bot(token=self.telegram_token)
        self.app = Application.builder().bot(self.bot).build()
        
        # Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
        self.flask_app = Flask(__name__)
        
        self.setup_handlers()
        self.setup_webhook_route()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    def setup_webhook_route(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è webhook"""
        @self.flask_app.route(f'/webhook/{self.telegram_token}', methods=['POST'])
        async def webhook():
            try:
                json_data = request.get_json()
                update = Update.de_json(json_data, self.bot)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ update —á–µ—Ä–µ–∑ Application
                await self.app.process_update(update)
                
                return 'OK', 200
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                return 'Error', 500

        @self.flask_app.route('/health', methods=['GET'])
        def health_check():
            return {'status': 'healthy', 'bot': 'running'}, 200

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–¥–µ–π!

–Ø –º–æ–≥—É:
‚Ä¢ üí¨ –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
‚Ä¢ üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ ChatGPT
‚Ä¢ üìä –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Google —Ç–∞–±–ª–∏—Ü—É

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
        """
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1. üí¨ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
   ‚Ä¢ –ü–∏—à–∏—Ç–µ –ª—é–±—ã–µ –∏–¥–µ–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏
   ‚Ä¢ –ë–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –≤–∞—à—É –º—ã—Å–ª—å —á–µ—Ä–µ–∑ ChatGPT

2. üìä **–ö–æ–º–∞–Ω–¥—ã:**
   ‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
   ‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ —Å–≤–æ—é –∏–¥–µ—é, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
        """
        await update.message.reply_text(help_text)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ChatGPT...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ChatGPT
            processed_text = await self.process_with_chatgpt(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            if self.google_script_url:
                await self.save_to_google_sheet(
                    username=update.effective_user.username or update.effective_user.first_name,
                    user_id=update.effective_user.id,
                    original_text=text,
                    processed_text=processed_text
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"""
‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!**

üí≠ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –º—ã—Å–ª—å:**
{processed_text}
            """
            
            await processing_msg.edit_text(result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def process_with_chatgpt(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT API"""
        try:
            response = await asyncio.to_thread(
                openai.ChatCompletion.create,
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–±–æ—á–∏—Ö –∏–¥–µ–π –∏ –º—ã—Å–ª–µ–π.
                        
–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å –º—ã—Å–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –°–¥–µ–ª–∞—Ç—å –µ—ë –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π
3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π)
5. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üéØ –°—É—Ç—å –∏–¥–µ–∏: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏]
‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: [–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]
üìä –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞: [–∫–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç]"""
                    },
                    {"role": "user", "content": text}
                ],
                max_tokens=600,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ChatGPT API: {e}")
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ ChatGPT. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

    async def save_to_google_sheet(self, username, user_id, original_text, processed_text):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Apps Script"""
        try:
            if not self.google_script_url:
                return
                
            data = {
                'action': 'saveMessage',
                'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                'username': username,
                'user_id': user_id,
                'message_type': 'text',
                'category': '–æ–±—â–µ–µ',
                'priority': '—Å—Ä–µ–¥–Ω–∏–π',
                'original_text': original_text,
                'processed_text': processed_text,
                'responsible': '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Apps Script
            response = await asyncio.to_thread(
                requests.post,
                self.google_script_url,
                json=data,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google: {response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É: {e}")

    async def set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        try:
            webhook_url = f"{self.webhook_url}/webhook/{self.telegram_token}"
            
            success = await self.bot.set_webhook(
                url=webhook_url,
                allowed_updates=["message", "callback_query"]
            )
            
            if success:
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

    def run_flask(self):
        """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        port = int(os.environ.get("PORT", 5000))
        self.flask_app.run(host="0.0.0.0", port=port, debug=False)

    async def startup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
            await self.app.initialize()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
            await self.set_webhook()
            
            logger.info("üöÄ Webhook –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    bot = WebhookTelegramBot()
    
    # –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_startup():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(bot.startup())
    
    startup_thread = threading.Thread(target=run_startup)
    startup_thread.start()
    startup_thread.join()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    logger.info("–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    bot.run_flask()

if __name__ == "__main__":
    main()
